plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.detekt)
    alias(libs.plugins.firebase.crashlytics)
    alias(libs.plugins.firebase.perf)
    alias(libs.plugins.google.services)
    alias(libs.plugins.hilt.android)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.android.ksp)
    alias(libs.plugins.ktlint)
    alias(libs.plugins.parcelize)
    alias(libs.plugins.safe.args)
}

android {
    namespace 'com.developers.sprintsync'
    compileSdk 35

    defaultConfig {
        applicationId "com.developers.sprintsync"
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        detekt {
            toolVersion = libs.versions.detekt.get()
            config.setFrom("config/detekt/detekt.yml")
            buildUponDefaultConfig = true
        }

        def properties = new Properties()
        def file = rootProject.file("key.properties")
        if (file.exists()) {
            properties.load(file.newDataInputStream())
        }
        manifestPlaceholders.mapsApiKey = properties.getProperty("MAPS_API_KEY", "")
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ["-opt-in=kotlin.RequiresOptIn"]
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

dependencies {
    // --- Core & UI ---
    implementation(libs.appcompat)
    implementation(libs.constraintlayout)
    implementation(libs.core.ktx)
    implementation(libs.material)
    implementation(libs.splashscreen.lib)

    // --- AndroidX Jetpack ---
    implementation(libs.datastore.prefs)
    implementation(libs.lifecycle.service)
    implementation(libs.lifecycle.vm.ktx)
    implementation(libs.navigation.fragment)
    implementation(libs.navigation.ui)
    implementation(libs.room.ktx)
    implementation(libs.room.runtime)
    ksp(libs.room.compiler)

    // --- Google Play & Firebase ---
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.analytics)
    implementation(libs.firebase.crashlytics)
    implementation(libs.firebase.firestore)
    implementation(libs.firebase.perf)
    implementation(libs.firebase.storage)
    implementation(libs.play.location)
    implementation(libs.play.maps)

    // --- DI ---
    implementation(libs.hilt.android)
    implementation(libs.hilt.android.testing)
    ksp(libs.hilt.compiler)

    // --- 3rd party ---
    implementation(libs.coil)
    implementation(libs.gson)
    implementation(libs.gson.extras)
    implementation(libs.mpandroidchart)
    implementation(libs.timber)

    // --- TESTS ---
    androidTestImplementation(libs.android.test.runner)
    androidTestImplementation(libs.androidx.arch.core.testing)
    androidTestImplementation(libs.coroutines.test)
    androidTestImplementation(libs.espresso.core)
    androidTestImplementation(libs.truth)

    testImplementation(libs.androidx.arch.core.testing)
    testImplementation(libs.assertj)
    testImplementation(libs.coroutines.test)
    testImplementation(libs.mockk.core)
    testImplementation(libs.truth)

    // Junit-4
    androidTestImplementation(libs.junit)
    androidTestImplementation(libs.junit.ext)
    testImplementation(libs.junit.vintage.engine)

    testImplementation(libs.junit)

    // Junit-5
    testImplementation(libs.junit.jupiter)
}